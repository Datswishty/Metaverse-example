/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AuctionFacetInterface extends ethers.utils.Interface {
  functions: {
    "acceptBid(uint256,address,uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "cancelBid(uint256)": FunctionFragment;
    "createPriceBasedAuction(uint8,uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "createTimeBasedAuction(uint8,uint256,uint256,address,uint256)": FunctionFragment;
    "makeBid(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPriceBasedAuction",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTimeBasedAuction",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBid",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPriceBasedAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTimeBasedAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeBid", data: BytesLike): Result;

  events: {
    "auctionCancelled(uint256)": EventFragment;
    "auctionCreated(uint256,address,uint8,uint256,uint256,uint256,address,uint256)": EventFragment;
    "bidAccepted(uint256,uint256,address)": EventFragment;
    "bidCancelled(uint256,address)": EventFragment;
    "bidCreated(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "auctionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "auctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "bidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "bidCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "bidCreated"): EventFragment;
}

export type auctionCancelledEvent = TypedEvent<
  [BigNumber] & { auctionId: BigNumber }
>;

export type auctionCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    auctionId: BigNumber;
    seller: string;
    selectedNft: number;
    tokenId: BigNumber;
    deadline: BigNumber;
    startPrice: BigNumber;
    payingToken: string;
    endPrice: BigNumber;
  }
>;

export type bidAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    auctionId: BigNumber;
    bidPrice: BigNumber;
    buyer: string;
  }
>;

export type bidCancelledEvent = TypedEvent<
  [BigNumber, string] & { auctionId: BigNumber; bidder: string }
>;

export type bidCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    auctionId: BigNumber;
    bidPrice: BigNumber;
    bidder: string;
  }
>;

export class AuctionFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AuctionFacetInterface;

  functions: {
    acceptBid(
      _selectedAuctionId: BigNumberish,
      _buyer: string,
      _selectedBidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAuction(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelBid(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPriceBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      _endPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTimeBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeBid(
      _selectedAuctionId: BigNumberish,
      _bidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBid(
    _selectedAuctionId: BigNumberish,
    _buyer: string,
    _selectedBidPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAuction(
    _selectedAuctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelBid(
    _selectedAuctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPriceBasedAuction(
    _selectedNft: BigNumberish,
    _tokenId: BigNumberish,
    _deadline: BigNumberish,
    _payingToken: string,
    _startPrice: BigNumberish,
    _endPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTimeBasedAuction(
    _selectedNft: BigNumberish,
    _tokenId: BigNumberish,
    _deadline: BigNumberish,
    _payingToken: string,
    _startPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeBid(
    _selectedAuctionId: BigNumberish,
    _bidPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBid(
      _selectedAuctionId: BigNumberish,
      _buyer: string,
      _selectedBidPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(
      _selectedAuctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBid(
      _selectedAuctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPriceBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      _endPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createTimeBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeBid(
      _selectedAuctionId: BigNumberish,
      _bidPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "auctionCancelled(uint256)"(
      auctionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

    auctionCancelled(
      auctionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

    "auctionCreated(uint256,address,uint8,uint256,uint256,uint256,address,uint256)"(
      auctionId?: BigNumberish | null,
      seller?: string | null,
      selectedNft?: null,
      tokenId?: BigNumberish | null,
      deadline?: null,
      startPrice?: null,
      payingToken?: null,
      endPrice?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ],
      {
        auctionId: BigNumber;
        seller: string;
        selectedNft: number;
        tokenId: BigNumber;
        deadline: BigNumber;
        startPrice: BigNumber;
        payingToken: string;
        endPrice: BigNumber;
      }
    >;

    auctionCreated(
      auctionId?: BigNumberish | null,
      seller?: string | null,
      selectedNft?: null,
      tokenId?: BigNumberish | null,
      deadline?: null,
      startPrice?: null,
      payingToken?: null,
      endPrice?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ],
      {
        auctionId: BigNumber;
        seller: string;
        selectedNft: number;
        tokenId: BigNumber;
        deadline: BigNumber;
        startPrice: BigNumber;
        payingToken: string;
        endPrice: BigNumber;
      }
    >;

    "bidAccepted(uint256,uint256,address)"(
      auctionId?: BigNumberish | null,
      bidPrice?: null,
      buyer?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { auctionId: BigNumber; bidPrice: BigNumber; buyer: string }
    >;

    bidAccepted(
      auctionId?: BigNumberish | null,
      bidPrice?: null,
      buyer?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { auctionId: BigNumber; bidPrice: BigNumber; buyer: string }
    >;

    "bidCancelled(uint256,address)"(
      auctionId?: BigNumberish | null,
      bidder?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { auctionId: BigNumber; bidder: string }
    >;

    bidCancelled(
      auctionId?: BigNumberish | null,
      bidder?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { auctionId: BigNumber; bidder: string }
    >;

    "bidCreated(uint256,uint256,address)"(
      auctionId?: BigNumberish | null,
      bidPrice?: null,
      bidder?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { auctionId: BigNumber; bidPrice: BigNumber; bidder: string }
    >;

    bidCreated(
      auctionId?: BigNumberish | null,
      bidPrice?: null,
      bidder?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { auctionId: BigNumber; bidPrice: BigNumber; bidder: string }
    >;
  };

  estimateGas: {
    acceptBid(
      _selectedAuctionId: BigNumberish,
      _buyer: string,
      _selectedBidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAuction(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelBid(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPriceBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      _endPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTimeBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeBid(
      _selectedAuctionId: BigNumberish,
      _bidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBid(
      _selectedAuctionId: BigNumberish,
      _buyer: string,
      _selectedBidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelBid(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPriceBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      _endPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTimeBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeBid(
      _selectedAuctionId: BigNumberish,
      _bidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
