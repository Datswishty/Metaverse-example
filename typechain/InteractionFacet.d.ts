/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface InteractionFacetInterface extends ethers.utils.Interface {
  functions: {
    "createScaleFromLands(uint256,uint256[])": FunctionFragment;
    "decomposeScale(uint256)": FunctionFragment;
    "depositNftForRent(uint8,uint256,address,uint256,uint256)": FunctionFragment;
    "getNftBackFromRent(uint8,uint256)": FunctionFragment;
    "mintBigScale(uint256,uint256[])": FunctionFragment;
    "mintBunchLands(address,uint256[],uint256,string)": FunctionFragment;
    "mintLand()": FunctionFragment;
    "mintPlanet()": FunctionFragment;
    "mintScale(uint256,uint256[],uint256,string)": FunctionFragment;
    "rentNft(uint8,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createScaleFromLands",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "decomposeScale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNftForRent",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftBackFromRent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBigScale",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBunchLands",
    values: [string, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "mintLand", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintPlanet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintScale",
    values: [BigNumberish, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rentNft",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createScaleFromLands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decomposeScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNftForRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftBackFromRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBigScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBunchLands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintLand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPlanet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rentNft", data: BytesLike): Result;

  events: {
    "nftDepositedToRent(uint8,uint256,address,address,uint256,uint256)": EventFragment;
    "nftRented(uint8,uint256,address,uint256)": EventFragment;
    "nftTakenBackFromRenterToOwner(uint8,uint256,address)": EventFragment;
    "scaleBurned(uint256)": EventFragment;
    "scaleCreated(uint256,uint256,address,uint256[])": EventFragment;
    "scaleMinted(uint256,uint256,address,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "nftDepositedToRent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "nftRented"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "nftTakenBackFromRenterToOwner"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "scaleBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "scaleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "scaleMinted"): EventFragment;
}

export type nftDepositedToRentEvent = TypedEvent<
  [number, BigNumber, string, string, BigNumber, BigNumber] & {
    selectedNftForRent: number;
    tokenId: BigNumber;
    payingToken: string;
    owner: string;
    rentPrice: BigNumber;
    rentAmountInHours: BigNumber;
  }
>;

export type nftRentedEvent = TypedEvent<
  [number, BigNumber, string, BigNumber] & {
    selectedNftForRent: number;
    tokenId: BigNumber;
    rentee: string;
    rentDeadline: BigNumber;
  }
>;

export type nftTakenBackFromRenterToOwnerEvent = TypedEvent<
  [number, BigNumber, string] & {
    selectedNftForRent: number;
    tokenId: BigNumber;
    owner: string;
  }
>;

export type scaleBurnedEvent = TypedEvent<[BigNumber] & { scaleId: BigNumber }>;

export type scaleCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber[]] & {
    scaleType: BigNumber;
    scaleId: BigNumber;
    owner: string;
    childIds: BigNumber[];
  }
>;

export type scaleMintedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber[]] & {
    scaleType: BigNumber;
    scaleId: BigNumber;
    owner: string;
    childIds: BigNumber[];
  }
>;

export class InteractionFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: InteractionFacetInterface;

  functions: {
    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNftForRent(
      selectedNftForRentDeposit: BigNumberish,
      tokenId: BigNumberish,
      payingToken: string,
      rentPrice: BigNumberish,
      rentAmountInHours: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNftBackFromRent(
      selectedNftForRentWithdraw: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBigScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBunchLands(
      _to: string,
      ids: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintLand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPlanet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rentNft(
      selectedNftForRent: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createScaleFromLands(
    scaleType: BigNumberish,
    landIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decomposeScale(
    scaleTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNftForRent(
    selectedNftForRentDeposit: BigNumberish,
    tokenId: BigNumberish,
    payingToken: string,
    rentPrice: BigNumberish,
    rentAmountInHours: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNftBackFromRent(
    selectedNftForRentWithdraw: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBigScale(
    scaleType: BigNumberish,
    landIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBunchLands(
    _to: string,
    ids: BigNumberish[],
    planetId: BigNumberish,
    customTokenUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintLand(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPlanet(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintScale(
    scaleType: BigNumberish,
    landIds: BigNumberish[],
    planetId: BigNumberish,
    customTokenUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rentNft(
    selectedNftForRent: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNftForRent(
      selectedNftForRentDeposit: BigNumberish,
      tokenId: BigNumberish,
      payingToken: string,
      rentPrice: BigNumberish,
      rentAmountInHours: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getNftBackFromRent(
      selectedNftForRentWithdraw: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBigScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintBunchLands(
      _to: string,
      ids: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintLand(overrides?: CallOverrides): Promise<void>;

    mintPlanet(overrides?: CallOverrides): Promise<void>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rentNft(
      selectedNftForRent: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "nftDepositedToRent(uint8,uint256,address,address,uint256,uint256)"(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      payingToken?: null,
      owner?: string | null,
      rentPrice?: null,
      rentAmountInHours?: null
    ): TypedEventFilter<
      [number, BigNumber, string, string, BigNumber, BigNumber],
      {
        selectedNftForRent: number;
        tokenId: BigNumber;
        payingToken: string;
        owner: string;
        rentPrice: BigNumber;
        rentAmountInHours: BigNumber;
      }
    >;

    nftDepositedToRent(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      payingToken?: null,
      owner?: string | null,
      rentPrice?: null,
      rentAmountInHours?: null
    ): TypedEventFilter<
      [number, BigNumber, string, string, BigNumber, BigNumber],
      {
        selectedNftForRent: number;
        tokenId: BigNumber;
        payingToken: string;
        owner: string;
        rentPrice: BigNumber;
        rentAmountInHours: BigNumber;
      }
    >;

    "nftRented(uint8,uint256,address,uint256)"(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      rentee?: string | null,
      rentDeadline?: null
    ): TypedEventFilter<
      [number, BigNumber, string, BigNumber],
      {
        selectedNftForRent: number;
        tokenId: BigNumber;
        rentee: string;
        rentDeadline: BigNumber;
      }
    >;

    nftRented(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      rentee?: string | null,
      rentDeadline?: null
    ): TypedEventFilter<
      [number, BigNumber, string, BigNumber],
      {
        selectedNftForRent: number;
        tokenId: BigNumber;
        rentee: string;
        rentDeadline: BigNumber;
      }
    >;

    "nftTakenBackFromRenterToOwner(uint8,uint256,address)"(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      owner?: string | null
    ): TypedEventFilter<
      [number, BigNumber, string],
      { selectedNftForRent: number; tokenId: BigNumber; owner: string }
    >;

    nftTakenBackFromRenterToOwner(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      owner?: string | null
    ): TypedEventFilter<
      [number, BigNumber, string],
      { selectedNftForRent: number; tokenId: BigNumber; owner: string }
    >;

    "scaleBurned(uint256)"(
      scaleId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { scaleId: BigNumber }>;

    scaleBurned(
      scaleId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { scaleId: BigNumber }>;

    "scaleCreated(uint256,uint256,address,uint256[])"(
      scaleType?: BigNumberish | null,
      scaleId?: BigNumberish | null,
      owner?: string | null,
      childIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber[]],
      {
        scaleType: BigNumber;
        scaleId: BigNumber;
        owner: string;
        childIds: BigNumber[];
      }
    >;

    scaleCreated(
      scaleType?: BigNumberish | null,
      scaleId?: BigNumberish | null,
      owner?: string | null,
      childIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber[]],
      {
        scaleType: BigNumber;
        scaleId: BigNumber;
        owner: string;
        childIds: BigNumber[];
      }
    >;

    "scaleMinted(uint256,uint256,address,uint256[])"(
      scaleType?: BigNumberish | null,
      scaleId?: BigNumberish | null,
      owner?: string | null,
      childIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber[]],
      {
        scaleType: BigNumber;
        scaleId: BigNumber;
        owner: string;
        childIds: BigNumber[];
      }
    >;

    scaleMinted(
      scaleType?: BigNumberish | null,
      scaleId?: BigNumberish | null,
      owner?: string | null,
      childIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber[]],
      {
        scaleType: BigNumber;
        scaleId: BigNumber;
        owner: string;
        childIds: BigNumber[];
      }
    >;
  };

  estimateGas: {
    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNftForRent(
      selectedNftForRentDeposit: BigNumberish,
      tokenId: BigNumberish,
      payingToken: string,
      rentPrice: BigNumberish,
      rentAmountInHours: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNftBackFromRent(
      selectedNftForRentWithdraw: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBigScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBunchLands(
      _to: string,
      ids: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintLand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPlanet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rentNft(
      selectedNftForRent: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNftForRent(
      selectedNftForRentDeposit: BigNumberish,
      tokenId: BigNumberish,
      payingToken: string,
      rentPrice: BigNumberish,
      rentAmountInHours: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNftBackFromRent(
      selectedNftForRentWithdraw: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBigScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBunchLands(
      _to: string,
      ids: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintLand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPlanet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rentNft(
      selectedNftForRent: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
