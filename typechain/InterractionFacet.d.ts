/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface InterractionFacetInterface extends ethers.utils.Interface {
  functions: {
    "createScaleFromLands(uint256,uint256[])": FunctionFragment;
    "decomposeScale(uint256)": FunctionFragment;
    "mintScale(uint256,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createScaleFromLands",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "decomposeScale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintScale",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createScaleFromLands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decomposeScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintScale", data: BytesLike): Result;

  events: {
    "scaleBurned(uint256)": EventFragment;
    "scaleCreated(uint256,uint256,address,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "scaleBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "scaleCreated"): EventFragment;
}

export type scaleBurnedEvent = TypedEvent<[BigNumber] & { scaleId: BigNumber }>;

export type scaleCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber[]] & {
    scaleType: BigNumber;
    scaleId: BigNumber;
    owner: string;
    childIds: BigNumber[];
  }
>;

export class InterractionFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: InterractionFacetInterface;

  functions: {
    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createScaleFromLands(
    scaleType: BigNumberish,
    landIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decomposeScale(
    scaleTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintScale(
    scaleType: BigNumberish,
    landIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "scaleBurned(uint256)"(
      scaleId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { scaleId: BigNumber }>;

    scaleBurned(
      scaleId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { scaleId: BigNumber }>;

    "scaleCreated(uint256,uint256,address,uint256[])"(
      scaleType?: BigNumberish | null,
      scaleId?: BigNumberish | null,
      owner?: string | null,
      childIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber[]],
      {
        scaleType: BigNumber;
        scaleId: BigNumber;
        owner: string;
        childIds: BigNumber[];
      }
    >;

    scaleCreated(
      scaleType?: BigNumberish | null,
      scaleId?: BigNumberish | null,
      owner?: string | null,
      childIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber[]],
      {
        scaleType: BigNumber;
        scaleId: BigNumber;
        owner: string;
        childIds: BigNumber[];
      }
    >;
  };

  estimateGas: {
    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
