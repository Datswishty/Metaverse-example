/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarketplaceFacetInterface extends ethers.utils.Interface {
  functions: {
    "buyItem(uint256)": FunctionFragment;
    "changeItemPrice(uint256,uint256)": FunctionFragment;
    "delistItem(uint256)": FunctionFragment;
    "listItemOnSale(uint8,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeItemPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItemOnSale",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeItemPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delistItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listItemOnSale",
    data: BytesLike
  ): Result;

  events: {
    "itemDelisted(uint256,address,uint8,uint256,address)": EventFragment;
    "itemListed(uint256,address,uint8,uint256,address,uint256,address)": EventFragment;
    "itemPriceUpdated(uint256,address,uint8,uint256,address,uint256,uint256)": EventFragment;
    "itemSold(uint256,address,uint8,uint256,address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "itemDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemSold"): EventFragment;
}

export type itemDelistedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, string] & {
    listingId: BigNumber;
    nftContract: string;
    itemType: number;
    tokenId: BigNumber;
    seller: string;
  }
>;

export type itemListedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, string, BigNumber, string] & {
    listingId: BigNumber;
    nftContract: string;
    itemType: number;
    tokenId: BigNumber;
    seller: string;
    price: BigNumber;
    sellingToken: string;
  }
>;

export type itemPriceUpdatedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, string, BigNumber, BigNumber] & {
    itemId: BigNumber;
    nftContract: string;
    itemType: number;
    tokenId: BigNumber;
    seller: string;
    oldPrice: BigNumber;
    newPrice: BigNumber;
  }
>;

export type itemSoldEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, string, string, BigNumber, string] & {
    listingId: BigNumber;
    nftContract: string;
    itemType: number;
    tokenId: BigNumber;
    buyer: string;
    seller: string;
    price: BigNumber;
    sellingToken: string;
  }
>;

export class MarketplaceFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketplaceFacetInterface;

  functions: {
    buyItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeItemPrice(
      listingId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delistItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listItemOnSale(
      selectedNftForListing: BigNumberish,
      tokenId: BigNumberish,
      sellingToken: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyItem(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeItemPrice(
    listingId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delistItem(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listItemOnSale(
    selectedNftForListing: BigNumberish,
    tokenId: BigNumberish,
    sellingToken: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyItem(listingId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeItemPrice(
      listingId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delistItem(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    listItemOnSale(
      selectedNftForListing: BigNumberish,
      tokenId: BigNumberish,
      sellingToken: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "itemDelisted(uint256,address,uint8,uint256,address)"(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
      }
    >;

    itemDelisted(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
      }
    >;

    "itemListed(uint256,address,uint8,uint256,address,uint256,address)"(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null,
      price?: null,
      sellingToken?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
        price: BigNumber;
        sellingToken: string;
      }
    >;

    itemListed(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null,
      price?: null,
      sellingToken?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
        price: BigNumber;
        sellingToken: string;
      }
    >;

    "itemPriceUpdated(uint256,address,uint8,uint256,address,uint256,uint256)"(
      itemId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null,
      oldPrice?: null,
      newPrice?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, BigNumber, BigNumber],
      {
        itemId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
        oldPrice: BigNumber;
        newPrice: BigNumber;
      }
    >;

    itemPriceUpdated(
      itemId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null,
      oldPrice?: null,
      newPrice?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, BigNumber, BigNumber],
      {
        itemId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
        oldPrice: BigNumber;
        newPrice: BigNumber;
      }
    >;

    "itemSold(uint256,address,uint8,uint256,address,address,uint256,address)"(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      buyer?: null,
      seller?: null,
      price?: null,
      sellingToken?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, string, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        buyer: string;
        seller: string;
        price: BigNumber;
        sellingToken: string;
      }
    >;

    itemSold(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      buyer?: null,
      seller?: null,
      price?: null,
      sellingToken?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, string, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        buyer: string;
        seller: string;
        price: BigNumber;
        sellingToken: string;
      }
    >;
  };

  estimateGas: {
    buyItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeItemPrice(
      listingId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delistItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listItemOnSale(
      selectedNftForListing: BigNumberish,
      tokenId: BigNumberish,
      sellingToken: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeItemPrice(
      listingId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delistItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listItemOnSale(
      selectedNftForListing: BigNumberish,
      tokenId: BigNumberish,
      sellingToken: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
