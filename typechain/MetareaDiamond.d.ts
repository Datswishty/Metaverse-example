/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MetareaDiamondInterface extends ethers.utils.Interface {
  functions: {
    "acceptBid(uint256,address,uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "cancelBid(uint256)": FunctionFragment;
    "createPriceBasedAuction(uint8,uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "createTimeBasedAuction(uint8,uint256,uint256,address,uint256)": FunctionFragment;
    "makeBid(uint256,uint256)": FunctionFragment;
    "diamondCut(tuple[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "createScaleFromLands(uint256,uint256[])": FunctionFragment;
    "decomposeScale(uint256)": FunctionFragment;
    "depositNftForRent(uint8,uint256,address,uint256,uint256)": FunctionFragment;
    "getNftBackFromRent(uint8,uint256)": FunctionFragment;
    "mintBigScale(uint256,uint256[])": FunctionFragment;
    "mintBunchLands(address,uint256[],uint256,string)": FunctionFragment;
    "mintLand()": FunctionFragment;
    "mintPlanet()": FunctionFragment;
    "mintScale(uint256,uint256[],uint256,string)": FunctionFragment;
    "rentNft(uint8,uint256)": FunctionFragment;
    "buyItem(uint256)": FunctionFragment;
    "changeItemPrice(uint256,uint256)": FunctionFragment;
    "delistItem(uint256)": FunctionFragment;
    "listItemOnSale(uint8,uint256,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getStaked(address,uint8)": FunctionFragment;
    "stake(uint8,uint256)": FunctionFragment;
    "unstake(uint8,uint256)": FunctionFragment;
    "changeTokenStatusOnMarketplace(address,bool)": FunctionFragment;
    "setAllowedScaleTypes(uint256[])": FunctionFragment;
    "setBuildingAddress(address)": FunctionFragment;
    "setLandAddress(address)": FunctionFragment;
    "setMarketplaceFee(uint256)": FunctionFragment;
    "setNftAddresses(address,address,address,address)": FunctionFragment;
    "setNftStorage(address)": FunctionFragment;
    "setPlanetAddress(address)": FunctionFragment;
    "setScaleAddress(address)": FunctionFragment;
    "setScaleComposableAddress(address)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPriceBasedAuction",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTimeBasedAuction",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createScaleFromLands",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "decomposeScale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNftForRent",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftBackFromRent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBigScale",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBunchLands",
    values: [string, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "mintLand", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintPlanet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintScale",
    values: [BigNumberish, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rentNft",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeItemPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItemOnSale",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaked",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokenStatusOnMarketplace",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedScaleTypes",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuildingAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLandAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplaceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAddresses",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlanetAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setScaleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setScaleComposableAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPriceBasedAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTimeBasedAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createScaleFromLands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decomposeScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNftForRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftBackFromRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBigScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBunchLands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintLand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPlanet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rentNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeItemPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delistItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listItemOnSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStaked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenStatusOnMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedScaleTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuildingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLandAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplaceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlanetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setScaleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setScaleComposableAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;

  events: {
    "auctionCancelled(uint256)": EventFragment;
    "auctionCreated(uint256,address,uint8,uint256,uint256,uint256,address,uint256)": EventFragment;
    "bidAccepted(uint256,uint256,address)": EventFragment;
    "bidCancelled(uint256,address)": EventFragment;
    "bidCreated(uint256,uint256,address)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "nftDepositedToRent(uint8,uint256,address,address,uint256,uint256)": EventFragment;
    "nftRented(uint8,uint256,address,uint256)": EventFragment;
    "nftTakenBackFromRenterToOwner(uint8,uint256,address)": EventFragment;
    "scaleBurned(uint256)": EventFragment;
    "scaleCreated(uint256,uint256,address,uint256[])": EventFragment;
    "scaleMinted(uint256,uint256,address,uint256[])": EventFragment;
    "itemDelisted(uint256,address,uint8,uint256,address)": EventFragment;
    "itemListed(uint256,address,uint8,uint256,address,uint256,address)": EventFragment;
    "itemPriceUpdated(uint256,address,uint8,uint256,address,uint256,uint256)": EventFragment;
    "itemSold(uint256,address,uint8,uint256,address,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint8,uint256,uint256)": EventFragment;
    "Unstaked(address,uint8,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "auctionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "auctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "bidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "bidCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "bidCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "nftDepositedToRent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "nftRented"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "nftTakenBackFromRenterToOwner"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "scaleBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "scaleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "scaleMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export type auctionCancelledEvent = TypedEvent<
  [BigNumber] & { auctionId: BigNumber }
>;

export type auctionCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    auctionId: BigNumber;
    seller: string;
    selectedNft: number;
    tokenId: BigNumber;
    deadline: BigNumber;
    startPrice: BigNumber;
    payingToken: string;
    endPrice: BigNumber;
  }
>;

export type bidAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    auctionId: BigNumber;
    bidPrice: BigNumber;
    buyer: string;
  }
>;

export type bidCancelledEvent = TypedEvent<
  [BigNumber, string] & { auctionId: BigNumber; bidder: string }
>;

export type bidCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    auctionId: BigNumber;
    bidPrice: BigNumber;
    bidder: string;
  }
>;

export type DiamondCutEvent = TypedEvent<
  [
    ([string, number, string[]] & {
      facetAddress: string;
      action: number;
      functionSelectors: string[];
    })[],
    string,
    string
  ] & {
    _diamondCut: ([string, number, string[]] & {
      facetAddress: string;
      action: number;
      functionSelectors: string[];
    })[];
    _init: string;
    _calldata: string;
  }
>;

export type nftDepositedToRentEvent = TypedEvent<
  [number, BigNumber, string, string, BigNumber, BigNumber] & {
    selectedNftForRent: number;
    tokenId: BigNumber;
    payingToken: string;
    owner: string;
    rentPrice: BigNumber;
    rentAmountInHours: BigNumber;
  }
>;

export type nftRentedEvent = TypedEvent<
  [number, BigNumber, string, BigNumber] & {
    selectedNftForRent: number;
    tokenId: BigNumber;
    rentee: string;
    rentDeadline: BigNumber;
  }
>;

export type nftTakenBackFromRenterToOwnerEvent = TypedEvent<
  [number, BigNumber, string] & {
    selectedNftForRent: number;
    tokenId: BigNumber;
    owner: string;
  }
>;

export type scaleBurnedEvent = TypedEvent<[BigNumber] & { scaleId: BigNumber }>;

export type scaleCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber[]] & {
    scaleType: BigNumber;
    scaleId: BigNumber;
    owner: string;
    childIds: BigNumber[];
  }
>;

export type scaleMintedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber[]] & {
    scaleType: BigNumber;
    scaleId: BigNumber;
    owner: string;
    childIds: BigNumber[];
  }
>;

export type itemDelistedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, string] & {
    listingId: BigNumber;
    nftContract: string;
    itemType: number;
    tokenId: BigNumber;
    seller: string;
  }
>;

export type itemListedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, string, BigNumber, string] & {
    listingId: BigNumber;
    nftContract: string;
    itemType: number;
    tokenId: BigNumber;
    seller: string;
    price: BigNumber;
    sellingToken: string;
  }
>;

export type itemPriceUpdatedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, string, BigNumber, BigNumber] & {
    itemId: BigNumber;
    nftContract: string;
    itemType: number;
    tokenId: BigNumber;
    seller: string;
    oldPrice: BigNumber;
    newPrice: BigNumber;
  }
>;

export type itemSoldEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, string, string, BigNumber, string] & {
    listingId: BigNumber;
    nftContract: string;
    itemType: number;
    tokenId: BigNumber;
    buyer: string;
    seller: string;
    price: BigNumber;
    sellingToken: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StakedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber] & {
    user: string;
    selectedNft: number;
    tokenId: BigNumber;
    stakeTime: BigNumber;
  }
>;

export type UnstakedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber] & {
    user: string;
    selectedNft: number;
    tokenId: BigNumber;
    unstakeTime: BigNumber;
  }
>;

export class MetareaDiamond extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MetareaDiamondInterface;

  functions: {
    acceptBid(
      _selectedAuctionId: BigNumberish,
      _buyer: string,
      _selectedBidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAuction(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelBid(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPriceBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      _endPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTimeBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeBid(
      _selectedAuctionId: BigNumberish,
      _bidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string[]] & {
          facetAddress: string;
          functionSelectors: string[];
        })[]
      ] & {
        facets_: ([string, string[]] & {
          facetAddress: string;
          functionSelectors: string[];
        })[];
      }
    >;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNftForRent(
      selectedNftForRentDeposit: BigNumberish,
      tokenId: BigNumberish,
      payingToken: string,
      rentPrice: BigNumberish,
      rentAmountInHours: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNftBackFromRent(
      selectedNftForRentWithdraw: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBigScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBunchLands(
      _to: string,
      ids: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintLand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPlanet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rentNft(
      selectedNftForRent: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeItemPrice(
      listingId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delistItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listItemOnSale(
      selectedNftForListing: BigNumberish,
      tokenId: BigNumberish,
      sellingToken: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStaked(
      _address: string,
      _selectedNft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    stake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeTokenStatusOnMarketplace(
      tokenAddress: string,
      newStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedScaleTypes(
      _types: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuildingAddress(
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLandAddress(
      land: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketplaceFee(
      marketplaceFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftAddresses(
      land: string,
      scale: string,
      planet: string,
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftStorage(
      nftStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlanetAddress(
      planet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setScaleAddress(
      scale: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setScaleComposableAddress(
      scaleComposable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBid(
    _selectedAuctionId: BigNumberish,
    _buyer: string,
    _selectedBidPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAuction(
    _selectedAuctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelBid(
    _selectedAuctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPriceBasedAuction(
    _selectedNft: BigNumberish,
    _tokenId: BigNumberish,
    _deadline: BigNumberish,
    _payingToken: string,
    _startPrice: BigNumberish,
    _endPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTimeBasedAuction(
    _selectedNft: BigNumberish,
    _tokenId: BigNumberish,
    _deadline: BigNumberish,
    _payingToken: string,
    _startPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeBid(
    _selectedAuctionId: BigNumberish,
    _bidPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    _diamondCut: {
      facetAddress: string;
      action: BigNumberish;
      functionSelectors: BytesLike[];
    }[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<
    ([string, string[]] & {
      facetAddress: string;
      functionSelectors: string[];
    })[]
  >;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createScaleFromLands(
    scaleType: BigNumberish,
    landIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decomposeScale(
    scaleTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNftForRent(
    selectedNftForRentDeposit: BigNumberish,
    tokenId: BigNumberish,
    payingToken: string,
    rentPrice: BigNumberish,
    rentAmountInHours: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNftBackFromRent(
    selectedNftForRentWithdraw: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBigScale(
    scaleType: BigNumberish,
    landIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBunchLands(
    _to: string,
    ids: BigNumberish[],
    planetId: BigNumberish,
    customTokenUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintLand(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPlanet(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintScale(
    scaleType: BigNumberish,
    landIds: BigNumberish[],
    planetId: BigNumberish,
    customTokenUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rentNft(
    selectedNftForRent: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyItem(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeItemPrice(
    listingId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delistItem(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listItemOnSale(
    selectedNftForListing: BigNumberish,
    tokenId: BigNumberish,
    sellingToken: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStaked(
    _address: string,
    _selectedNft: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  stake(
    _selectedNft: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _selectedNft: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeTokenStatusOnMarketplace(
    tokenAddress: string,
    newStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedScaleTypes(
    _types: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuildingAddress(
    building: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLandAddress(
    land: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketplaceFee(
    marketplaceFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftAddresses(
    land: string,
    scale: string,
    planet: string,
    building: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftStorage(
    nftStorage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlanetAddress(
    planet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setScaleAddress(
    scale: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setScaleComposableAddress(
    scaleComposable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    newTreasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBid(
      _selectedAuctionId: BigNumberish,
      _buyer: string,
      _selectedBidPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(
      _selectedAuctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBid(
      _selectedAuctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPriceBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      _endPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createTimeBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeBid(
      _selectedAuctionId: BigNumberish,
      _bidPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      ([string, string[]] & {
        facetAddress: string;
        functionSelectors: string[];
      })[]
    >;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNftForRent(
      selectedNftForRentDeposit: BigNumberish,
      tokenId: BigNumberish,
      payingToken: string,
      rentPrice: BigNumberish,
      rentAmountInHours: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getNftBackFromRent(
      selectedNftForRentWithdraw: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBigScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintBunchLands(
      _to: string,
      ids: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintLand(overrides?: CallOverrides): Promise<void>;

    mintPlanet(overrides?: CallOverrides): Promise<void>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rentNft(
      selectedNftForRent: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItem(listingId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeItemPrice(
      listingId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delistItem(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    listItemOnSale(
      selectedNftForListing: BigNumberish,
      tokenId: BigNumberish,
      sellingToken: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getStaked(
      _address: string,
      _selectedNft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    stake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTokenStatusOnMarketplace(
      tokenAddress: string,
      newStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedScaleTypes(
      _types: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBuildingAddress(
      building: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLandAddress(land: string, overrides?: CallOverrides): Promise<void>;

    setMarketplaceFee(
      marketplaceFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftAddresses(
      land: string,
      scale: string,
      planet: string,
      building: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftStorage(nftStorage: string, overrides?: CallOverrides): Promise<void>;

    setPlanetAddress(planet: string, overrides?: CallOverrides): Promise<void>;

    setScaleAddress(scale: string, overrides?: CallOverrides): Promise<void>;

    setScaleComposableAddress(
      scaleComposable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "auctionCancelled(uint256)"(
      auctionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

    auctionCancelled(
      auctionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

    "auctionCreated(uint256,address,uint8,uint256,uint256,uint256,address,uint256)"(
      auctionId?: BigNumberish | null,
      seller?: string | null,
      selectedNft?: null,
      tokenId?: BigNumberish | null,
      deadline?: null,
      startPrice?: null,
      payingToken?: null,
      endPrice?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ],
      {
        auctionId: BigNumber;
        seller: string;
        selectedNft: number;
        tokenId: BigNumber;
        deadline: BigNumber;
        startPrice: BigNumber;
        payingToken: string;
        endPrice: BigNumber;
      }
    >;

    auctionCreated(
      auctionId?: BigNumberish | null,
      seller?: string | null,
      selectedNft?: null,
      tokenId?: BigNumberish | null,
      deadline?: null,
      startPrice?: null,
      payingToken?: null,
      endPrice?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ],
      {
        auctionId: BigNumber;
        seller: string;
        selectedNft: number;
        tokenId: BigNumber;
        deadline: BigNumber;
        startPrice: BigNumber;
        payingToken: string;
        endPrice: BigNumber;
      }
    >;

    "bidAccepted(uint256,uint256,address)"(
      auctionId?: BigNumberish | null,
      bidPrice?: null,
      buyer?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { auctionId: BigNumber; bidPrice: BigNumber; buyer: string }
    >;

    bidAccepted(
      auctionId?: BigNumberish | null,
      bidPrice?: null,
      buyer?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { auctionId: BigNumber; bidPrice: BigNumber; buyer: string }
    >;

    "bidCancelled(uint256,address)"(
      auctionId?: BigNumberish | null,
      bidder?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { auctionId: BigNumber; bidder: string }
    >;

    bidCancelled(
      auctionId?: BigNumberish | null,
      bidder?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { auctionId: BigNumber; bidder: string }
    >;

    "bidCreated(uint256,uint256,address)"(
      auctionId?: BigNumberish | null,
      bidPrice?: null,
      bidder?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { auctionId: BigNumber; bidPrice: BigNumber; bidder: string }
    >;

    bidCreated(
      auctionId?: BigNumberish | null,
      bidPrice?: null,
      bidder?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { auctionId: BigNumber; bidPrice: BigNumber; bidder: string }
    >;

    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): TypedEventFilter<
      [
        ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[],
        string,
        string
      ],
      {
        _diamondCut: ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[];
        _init: string;
        _calldata: string;
      }
    >;

    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): TypedEventFilter<
      [
        ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[],
        string,
        string
      ],
      {
        _diamondCut: ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[];
        _init: string;
        _calldata: string;
      }
    >;

    "nftDepositedToRent(uint8,uint256,address,address,uint256,uint256)"(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      payingToken?: null,
      owner?: string | null,
      rentPrice?: null,
      rentAmountInHours?: null
    ): TypedEventFilter<
      [number, BigNumber, string, string, BigNumber, BigNumber],
      {
        selectedNftForRent: number;
        tokenId: BigNumber;
        payingToken: string;
        owner: string;
        rentPrice: BigNumber;
        rentAmountInHours: BigNumber;
      }
    >;

    nftDepositedToRent(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      payingToken?: null,
      owner?: string | null,
      rentPrice?: null,
      rentAmountInHours?: null
    ): TypedEventFilter<
      [number, BigNumber, string, string, BigNumber, BigNumber],
      {
        selectedNftForRent: number;
        tokenId: BigNumber;
        payingToken: string;
        owner: string;
        rentPrice: BigNumber;
        rentAmountInHours: BigNumber;
      }
    >;

    "nftRented(uint8,uint256,address,uint256)"(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      rentee?: string | null,
      rentDeadline?: null
    ): TypedEventFilter<
      [number, BigNumber, string, BigNumber],
      {
        selectedNftForRent: number;
        tokenId: BigNumber;
        rentee: string;
        rentDeadline: BigNumber;
      }
    >;

    nftRented(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      rentee?: string | null,
      rentDeadline?: null
    ): TypedEventFilter<
      [number, BigNumber, string, BigNumber],
      {
        selectedNftForRent: number;
        tokenId: BigNumber;
        rentee: string;
        rentDeadline: BigNumber;
      }
    >;

    "nftTakenBackFromRenterToOwner(uint8,uint256,address)"(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      owner?: string | null
    ): TypedEventFilter<
      [number, BigNumber, string],
      { selectedNftForRent: number; tokenId: BigNumber; owner: string }
    >;

    nftTakenBackFromRenterToOwner(
      selectedNftForRent?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      owner?: string | null
    ): TypedEventFilter<
      [number, BigNumber, string],
      { selectedNftForRent: number; tokenId: BigNumber; owner: string }
    >;

    "scaleBurned(uint256)"(
      scaleId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { scaleId: BigNumber }>;

    scaleBurned(
      scaleId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { scaleId: BigNumber }>;

    "scaleCreated(uint256,uint256,address,uint256[])"(
      scaleType?: BigNumberish | null,
      scaleId?: BigNumberish | null,
      owner?: string | null,
      childIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber[]],
      {
        scaleType: BigNumber;
        scaleId: BigNumber;
        owner: string;
        childIds: BigNumber[];
      }
    >;

    scaleCreated(
      scaleType?: BigNumberish | null,
      scaleId?: BigNumberish | null,
      owner?: string | null,
      childIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber[]],
      {
        scaleType: BigNumber;
        scaleId: BigNumber;
        owner: string;
        childIds: BigNumber[];
      }
    >;

    "scaleMinted(uint256,uint256,address,uint256[])"(
      scaleType?: BigNumberish | null,
      scaleId?: BigNumberish | null,
      owner?: string | null,
      childIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber[]],
      {
        scaleType: BigNumber;
        scaleId: BigNumber;
        owner: string;
        childIds: BigNumber[];
      }
    >;

    scaleMinted(
      scaleType?: BigNumberish | null,
      scaleId?: BigNumberish | null,
      owner?: string | null,
      childIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber[]],
      {
        scaleType: BigNumber;
        scaleId: BigNumber;
        owner: string;
        childIds: BigNumber[];
      }
    >;

    "itemDelisted(uint256,address,uint8,uint256,address)"(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
      }
    >;

    itemDelisted(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
      }
    >;

    "itemListed(uint256,address,uint8,uint256,address,uint256,address)"(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null,
      price?: null,
      sellingToken?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
        price: BigNumber;
        sellingToken: string;
      }
    >;

    itemListed(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null,
      price?: null,
      sellingToken?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
        price: BigNumber;
        sellingToken: string;
      }
    >;

    "itemPriceUpdated(uint256,address,uint8,uint256,address,uint256,uint256)"(
      itemId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null,
      oldPrice?: null,
      newPrice?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, BigNumber, BigNumber],
      {
        itemId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
        oldPrice: BigNumber;
        newPrice: BigNumber;
      }
    >;

    itemPriceUpdated(
      itemId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      seller?: null,
      oldPrice?: null,
      newPrice?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, BigNumber, BigNumber],
      {
        itemId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        seller: string;
        oldPrice: BigNumber;
        newPrice: BigNumber;
      }
    >;

    "itemSold(uint256,address,uint8,uint256,address,address,uint256,address)"(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      buyer?: null,
      seller?: null,
      price?: null,
      sellingToken?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, string, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        buyer: string;
        seller: string;
        price: BigNumber;
        sellingToken: string;
      }
    >;

    itemSold(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      itemType?: null,
      tokenId?: BigNumberish | null,
      buyer?: null,
      seller?: null,
      price?: null,
      sellingToken?: null
    ): TypedEventFilter<
      [BigNumber, string, number, BigNumber, string, string, BigNumber, string],
      {
        listingId: BigNumber;
        nftContract: string;
        itemType: number;
        tokenId: BigNumber;
        buyer: string;
        seller: string;
        price: BigNumber;
        sellingToken: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Staked(address,uint8,uint256,uint256)"(
      user?: string | null,
      selectedNft?: null,
      tokenId?: null,
      stakeTime?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        user: string;
        selectedNft: number;
        tokenId: BigNumber;
        stakeTime: BigNumber;
      }
    >;

    Staked(
      user?: string | null,
      selectedNft?: null,
      tokenId?: null,
      stakeTime?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        user: string;
        selectedNft: number;
        tokenId: BigNumber;
        stakeTime: BigNumber;
      }
    >;

    "Unstaked(address,uint8,uint256,uint256)"(
      user?: string | null,
      selectedNft?: null,
      tokenId?: null,
      unstakeTime?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        user: string;
        selectedNft: number;
        tokenId: BigNumber;
        unstakeTime: BigNumber;
      }
    >;

    Unstaked(
      user?: string | null,
      selectedNft?: null,
      tokenId?: null,
      unstakeTime?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        user: string;
        selectedNft: number;
        tokenId: BigNumber;
        unstakeTime: BigNumber;
      }
    >;
  };

  estimateGas: {
    acceptBid(
      _selectedAuctionId: BigNumberish,
      _buyer: string,
      _selectedBidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAuction(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelBid(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPriceBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      _endPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTimeBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeBid(
      _selectedAuctionId: BigNumberish,
      _bidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNftForRent(
      selectedNftForRentDeposit: BigNumberish,
      tokenId: BigNumberish,
      payingToken: string,
      rentPrice: BigNumberish,
      rentAmountInHours: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNftBackFromRent(
      selectedNftForRentWithdraw: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBigScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBunchLands(
      _to: string,
      ids: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintLand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPlanet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rentNft(
      selectedNftForRent: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeItemPrice(
      listingId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delistItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listItemOnSale(
      selectedNftForListing: BigNumberish,
      tokenId: BigNumberish,
      sellingToken: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStaked(
      _address: string,
      _selectedNft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeTokenStatusOnMarketplace(
      tokenAddress: string,
      newStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedScaleTypes(
      _types: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuildingAddress(
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLandAddress(
      land: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketplaceFee(
      marketplaceFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftAddresses(
      land: string,
      scale: string,
      planet: string,
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftStorage(
      nftStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlanetAddress(
      planet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setScaleAddress(
      scale: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setScaleComposableAddress(
      scaleComposable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBid(
      _selectedAuctionId: BigNumberish,
      _buyer: string,
      _selectedBidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelBid(
      _selectedAuctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPriceBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      _endPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTimeBasedAuction(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      _deadline: BigNumberish,
      _payingToken: string,
      _startPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeBid(
      _selectedAuctionId: BigNumberish,
      _bidPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createScaleFromLands(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decomposeScale(
      scaleTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNftForRent(
      selectedNftForRentDeposit: BigNumberish,
      tokenId: BigNumberish,
      payingToken: string,
      rentPrice: BigNumberish,
      rentAmountInHours: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNftBackFromRent(
      selectedNftForRentWithdraw: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBigScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBunchLands(
      _to: string,
      ids: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintLand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPlanet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintScale(
      scaleType: BigNumberish,
      landIds: BigNumberish[],
      planetId: BigNumberish,
      customTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rentNft(
      selectedNftForRent: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeItemPrice(
      listingId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delistItem(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listItemOnSale(
      selectedNftForListing: BigNumberish,
      tokenId: BigNumberish,
      sellingToken: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStaked(
      _address: string,
      _selectedNft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeTokenStatusOnMarketplace(
      tokenAddress: string,
      newStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedScaleTypes(
      _types: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuildingAddress(
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLandAddress(
      land: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketplaceFee(
      marketplaceFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftAddresses(
      land: string,
      scale: string,
      planet: string,
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftStorage(
      nftStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlanetAddress(
      planet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setScaleAddress(
      scale: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setScaleComposableAddress(
      scaleComposable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
