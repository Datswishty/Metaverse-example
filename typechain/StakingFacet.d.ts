/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingFacetInterface extends ethers.utils.Interface {
  functions: {
    "getStaked(address,uint8)": FunctionFragment;
    "stake(uint8,uint256)": FunctionFragment;
    "unstake(uint8,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getStaked",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getStaked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "Staked(address,uint8,uint256,uint256)": EventFragment;
    "Unstaked(address,uint8,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export type StakedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber] & {
    user: string;
    selectedNft: number;
    tokenId: BigNumber;
    stakeTime: BigNumber;
  }
>;

export type UnstakedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber] & {
    user: string;
    selectedNft: number;
    tokenId: BigNumber;
    unstakeTime: BigNumber;
  }
>;

export class StakingFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingFacetInterface;

  functions: {
    getStaked(
      _address: string,
      _selectedNft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    stake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getStaked(
    _address: string,
    _selectedNft: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  stake(
    _selectedNft: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _selectedNft: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getStaked(
      _address: string,
      _selectedNft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    stake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Staked(address,uint8,uint256,uint256)"(
      user?: string | null,
      selectedNft?: null,
      tokenId?: null,
      stakeTime?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        user: string;
        selectedNft: number;
        tokenId: BigNumber;
        stakeTime: BigNumber;
      }
    >;

    Staked(
      user?: string | null,
      selectedNft?: null,
      tokenId?: null,
      stakeTime?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        user: string;
        selectedNft: number;
        tokenId: BigNumber;
        stakeTime: BigNumber;
      }
    >;

    "Unstaked(address,uint8,uint256,uint256)"(
      user?: string | null,
      selectedNft?: null,
      tokenId?: null,
      unstakeTime?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        user: string;
        selectedNft: number;
        tokenId: BigNumber;
        unstakeTime: BigNumber;
      }
    >;

    Unstaked(
      user?: string | null,
      selectedNft?: null,
      tokenId?: null,
      unstakeTime?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber],
      {
        user: string;
        selectedNft: number;
        tokenId: BigNumber;
        unstakeTime: BigNumber;
      }
    >;
  };

  estimateGas: {
    getStaked(
      _address: string,
      _selectedNft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getStaked(
      _address: string,
      _selectedNft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _selectedNft: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
