/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StateManagerFacetInterface extends ethers.utils.Interface {
  functions: {
    "changeTokenStatusOnMarketplace(address,bool)": FunctionFragment;
    "setAllowedScaleTypes(uint256[])": FunctionFragment;
    "setBuildingAddress(address)": FunctionFragment;
    "setLandAddress(address)": FunctionFragment;
    "setMarketplaceFee(uint256)": FunctionFragment;
    "setNftAddresses(address,address,address,address)": FunctionFragment;
    "setNftStorage(address)": FunctionFragment;
    "setPlanetAddress(address)": FunctionFragment;
    "setScaleAddress(address)": FunctionFragment;
    "setScaleComposableAddress(address)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeTokenStatusOnMarketplace",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedScaleTypes",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuildingAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLandAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplaceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAddresses",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlanetAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setScaleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setScaleComposableAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeTokenStatusOnMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedScaleTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuildingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLandAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplaceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlanetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setScaleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setScaleComposableAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export class StateManagerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StateManagerFacetInterface;

  functions: {
    changeTokenStatusOnMarketplace(
      tokenAddress: string,
      newStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedScaleTypes(
      _types: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuildingAddress(
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLandAddress(
      land: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketplaceFee(
      marketplaceFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftAddresses(
      land: string,
      scale: string,
      planet: string,
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftStorage(
      nftStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlanetAddress(
      planet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setScaleAddress(
      scale: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setScaleComposableAddress(
      scaleComposable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changeTokenStatusOnMarketplace(
    tokenAddress: string,
    newStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedScaleTypes(
    _types: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuildingAddress(
    building: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLandAddress(
    land: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketplaceFee(
    marketplaceFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftAddresses(
    land: string,
    scale: string,
    planet: string,
    building: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftStorage(
    nftStorage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlanetAddress(
    planet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setScaleAddress(
    scale: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setScaleComposableAddress(
    scaleComposable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    newTreasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeTokenStatusOnMarketplace(
      tokenAddress: string,
      newStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedScaleTypes(
      _types: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBuildingAddress(
      building: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLandAddress(land: string, overrides?: CallOverrides): Promise<void>;

    setMarketplaceFee(
      marketplaceFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftAddresses(
      land: string,
      scale: string,
      planet: string,
      building: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftStorage(nftStorage: string, overrides?: CallOverrides): Promise<void>;

    setPlanetAddress(planet: string, overrides?: CallOverrides): Promise<void>;

    setScaleAddress(scale: string, overrides?: CallOverrides): Promise<void>;

    setScaleComposableAddress(
      scaleComposable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    changeTokenStatusOnMarketplace(
      tokenAddress: string,
      newStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedScaleTypes(
      _types: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuildingAddress(
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLandAddress(
      land: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketplaceFee(
      marketplaceFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftAddresses(
      land: string,
      scale: string,
      planet: string,
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftStorage(
      nftStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlanetAddress(
      planet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setScaleAddress(
      scale: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setScaleComposableAddress(
      scaleComposable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeTokenStatusOnMarketplace(
      tokenAddress: string,
      newStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedScaleTypes(
      _types: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuildingAddress(
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLandAddress(
      land: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketplaceFee(
      marketplaceFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftAddresses(
      land: string,
      scale: string,
      planet: string,
      building: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftStorage(
      nftStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlanetAddress(
      planet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setScaleAddress(
      scale: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setScaleComposableAddress(
      scaleComposable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
