/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VestingOldInterface extends ethers.utils.Interface {
  functions: {
    "addNewHolder(address,uint256,uint256,uint256)": FunctionFragment;
    "addressAray(address,uint256)": FunctionFragment;
    "countId()": FunctionFragment;
    "endDateInMonth()": FunctionFragment;
    "idStruct(uint256)": FunctionFragment;
    "initialSupply()": FunctionFragment;
    "initialize()": FunctionFragment;
    "metaToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startDate()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawal(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addNewHolder",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressAray",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "countId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endDateInMonth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "idStruct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "metaToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawal",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressAray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "countId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endDateInMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idStruct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metaToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawal", data: BytesLike): Result;

  events: {
    "NewBuyer(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokensUnlocked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewBuyer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensUnlocked"): EventFragment;
}

export type NewBuyerEvent = TypedEvent<
  [string, BigNumber] & { buyer: string; valueToByu: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TokensUnlockedEvent = TypedEvent<
  [string, BigNumber] & { buyer: string; unlockedAmount: BigNumber }
>;

export class VestingOld extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VestingOldInterface;

  functions: {
    addNewHolder(
      _beneficiar: string,
      _startDate: BigNumberish,
      _value: BigNumberish,
      _durationInMonth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressAray(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    countId(overrides?: CallOverrides): Promise<[BigNumber]>;

    endDateInMonth(overrides?: CallOverrides): Promise<[BigNumber]>;

    idStruct(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        beneficiar: string;
        lastWithdraw: BigNumber;
        value: BigNumber;
        durationInMonth: BigNumber;
        valueInMonths: BigNumber;
      }
    >;

    initialSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    metaToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawal(
      _countId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addNewHolder(
    _beneficiar: string,
    _startDate: BigNumberish,
    _value: BigNumberish,
    _durationInMonth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressAray(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countId(overrides?: CallOverrides): Promise<BigNumber>;

  endDateInMonth(overrides?: CallOverrides): Promise<BigNumber>;

  idStruct(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      beneficiar: string;
      lastWithdraw: BigNumber;
      value: BigNumber;
      durationInMonth: BigNumber;
      valueInMonths: BigNumber;
    }
  >;

  initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  metaToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawal(
    _countId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNewHolder(
      _beneficiar: string,
      _startDate: BigNumberish,
      _value: BigNumberish,
      _durationInMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressAray(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countId(overrides?: CallOverrides): Promise<BigNumber>;

    endDateInMonth(overrides?: CallOverrides): Promise<BigNumber>;

    idStruct(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        beneficiar: string;
        lastWithdraw: BigNumber;
        value: BigNumber;
        durationInMonth: BigNumber;
        valueInMonths: BigNumber;
      }
    >;

    initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    metaToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawal(
      _countId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewBuyer(address,uint256)"(
      buyer?: string | null,
      valueToByu?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { buyer: string; valueToByu: BigNumber }
    >;

    NewBuyer(
      buyer?: string | null,
      valueToByu?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { buyer: string; valueToByu: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TokensUnlocked(address,uint256)"(
      buyer?: string | null,
      unlockedAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { buyer: string; unlockedAmount: BigNumber }
    >;

    TokensUnlocked(
      buyer?: string | null,
      unlockedAmount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { buyer: string; unlockedAmount: BigNumber }
    >;
  };

  estimateGas: {
    addNewHolder(
      _beneficiar: string,
      _startDate: BigNumberish,
      _value: BigNumberish,
      _durationInMonth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressAray(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countId(overrides?: CallOverrides): Promise<BigNumber>;

    endDateInMonth(overrides?: CallOverrides): Promise<BigNumber>;

    idStruct(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    metaToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawal(
      _countId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewHolder(
      _beneficiar: string,
      _startDate: BigNumberish,
      _value: BigNumberish,
      _durationInMonth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressAray(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endDateInMonth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idStruct(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    metaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawal(
      _countId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
